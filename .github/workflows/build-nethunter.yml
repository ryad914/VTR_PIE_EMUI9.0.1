name: VTR Kernel Build (GCC 4.9)

on:
  push:
    branches:
      - kernel-only # S'ex√©cute quand vous poussez sur cette branche
  # Permet de d√©clencher la compilation manuellement depuis l'onglet Actions
  workflow_dispatch:
    inputs:
        build_info:
          description: "Build triggered manually for VTR Kernel"
          required: false
          default: "Manual run"
          
permissions:
  contents: write

env:
  # --- Variables pour la compilation EMUI 9.0.1 (Hi3660) ---
  KERNEL_SOURCE_DIR: 'kernel'               # L'emplacement du Makefile dans votre d√©p√¥t
  ARCH: 'arm64'                              # Architecture cible
  # Prefix bas√© sur le README: aarch64-linux-android-
  CROSS_COMPILE_PREFIX: 'aarch64-linux-android-' 
  DEFCONFIG: 'merge_hi3660_defconfig'       # Confirm√© par le README
  TOOLCHAIN_NAME: 'gcc-4.9'                  # Toolchain requise
  TOOLCHAIN_URL: 'https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9/archive/refs/heads/master.zip'
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: kernel-only # Clone la branche sp√©cifique
          submodules: recursive 

      - name: üõ†Ô∏è Install Build Dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential libncurses-dev flex bison bc unzip wget git

      - name: ‚¨áÔ∏è Download & Configure GCC 4.9 Toolchain
        run: |
          echo "Downloading required GCC 4.9 toolchain..."
          # T√©l√©charge et d√©zippe la toolchain LineageOS GCC 4.9
          wget -q -O toolchain.zip ${{ env.TOOLCHAIN_URL }}
          unzip -q toolchain.zip -d ./
          
          # Le nom du dossier d√©zipp√© est long, on le renomme pour plus de simplicit√©
          TOOLCHAIN_DIR=$(find . -maxdepth 1 -type d -name "android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9*")
          mv $TOOLCHAIN_DIR toolchain
          
          # Ajoute le chemin /bin de la toolchain √† la variable PATH (comme dans votre README)
          echo "PATH=$PWD/toolchain/bin:$PATH" >> $GITHUB_ENV
          
      - name: ‚öôÔ∏è Configure Kernel (defconfig)
        run: |
          cd ${{ env.KERNEL_SOURCE_DIR }}
          # Ex√©cute la commande de configuration sp√©cifique au README
          make O=out ARCH=${{ env.ARCH }} ${{ env.DEFCONFIG }}

      - name: üî® Compile Kernel (Multithreaded)
        timeout-minutes: 45
        run: |
          cd ${{ env.KERNEL_SOURCE_DIR }}
          
          # Ex√©cute la commande de compilation sp√©cifique au README
          make -j$(nproc) O=out \
            ARCH=${{ env.ARCH }} \
            CROSS_COMPILE=${{ env.CROSS_COMPILE_PREFIX }}

      - name: üì¶ Publish Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compiled-kernel-${{ github.sha }}
          # Chemin de sortie confirm√© par votre README
          path: |
            ${{ env.KERNEL_SOURCE_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz
            ${{ env.KERNEL_SOURCE_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz-dtb # Inclus au cas o√π
          retention-days: 7
          if-no-files-found: "error"
          
      - name: ‚úÖ Verify Final Output
        run: |
          ls -l ${{ env.KERNEL_SOURCE_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz
          echo "Compilation finished. Check Artifacts for Image.gz."
          
