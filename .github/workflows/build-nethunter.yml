name: VTR NetHunter Kernel Build

# ----------------------------------------------------------------------
# D√âCLENCHEURS
# ----------------------------------------------------------------------
on:
  push:
    branches:
      - kernel-only # D√©clenche la compilation lors d'un 'git push' sur cette branche
  workflow_dispatch:
    # Permet de lancer le build manuellement depuis l'interface GitHub
    inputs:
        build_mode:
          description: "Mode de compilation"
          required: true
          default: "kernel-only"
          type: choice
          options:
          - "kernel-only"
          - "full-package"
          
permissions:
  contents: write

# ----------------------------------------------------------------------
# VARIABLES D'ENVIRONNEMENT
# ----------------------------------------------------------------------
env:
  # Renseignements bas√©s sur le README du noyau VTR EMUI (Hi3660)
  KERNEL_SOURCE_DIR: 'kernel'               # Le r√©pertoire o√π se trouve le Makefile
  ARCH: 'arm64'                              # Architecture cible
  # Le pr√©fixe de compilation pour la toolchain GCC 4.9 Android
  CROSS_COMPILE_PREFIX: 'aarch64-linux-android-' 
  
  # Toolchain (GCC 4.9) n√©cessaire pour les anciens noyaux Android EMUI
  TOOLCHAIN_URL: 'https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9/archive/refs/heads/master.zip'
  
# ----------------------------------------------------------------------
# JOB DE COMPILATION
# ----------------------------------------------------------------------
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout Code (Ignorer les Sous-Modules)
        uses: actions/checkout@v4
        with:
          ref: kernel-only 
          submodules: false # ESSENTIEL : √âvite l'erreur du sous-module NetHunter d√©fectueux

      - name: üõ†Ô∏è Installer les D√©pendances Linux (Build Essentials, etc.)
        run: |
          sudo apt update
          sudo apt install -y build-essential libncurses-dev flex bison bc unzip wget git lzop

      - name: üì¶ T√©l√©charger et Configurer la Toolchain GCC 4.9
        id: toolchain_setup
        run: |
          echo "T√©l√©chargement de la toolchain GCC 4.9 requise..."
          wget -q -O toolchain.zip ${{ env.TOOLCHAIN_URL }}
          unzip -q toolchain.zip -d ./
          
          # Renomme le dossier pour faciliter le chemin
          TOOLCHAIN_DIR=$(find . -maxdepth 1 -type d -name "android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9*")
          mv $TOOLCHAIN_DIR toolchain
          
          # Ajoute le chemin /bin de la toolchain √† la variable PATH pour que 'make' la trouve
          echo "PATH=$PWD/toolchain/bin:$PATH" >> $GITHUB_ENV
          
      - name: ‚öôÔ∏è Pr√©parer la Configuration du Noyau (Utilisation du .config existant)
        run: |
          cd ${{ env.KERNEL_SOURCE_DIR }}
          
          # Cr√©er le r√©pertoire de sortie 'out'
          mkdir -p out
          
          # Copier le .config pouss√© par l'utilisateur vers le r√©pertoire de sortie
          if [ -f .config ]; then
              cp .config out/.config
              echo "Utilisation du fichier .config existant pouss√© dans le r√©pertoire 'kernel/'."
              
              # Met √† jour la configuration en utilisant le .config pour s'adapter √† l'environnement
              make O=out ARCH=${{ env.ARCH }} oldconfig 
              
          else
              # Cette erreur ne devrait plus appara√Ætre si le .config est bien dans kernel/
              echo "ERREUR : Le fichier .config n'a pas √©t√© trouv√© dans le r√©pertoire source 'kernel/'."
              exit 1
          fi
          
      - name: üî® Compiler le Noyau et les Modules
        timeout-minutes: 45
        run: |
          cd ${{ env.KERNEL_SOURCE_DIR }}
          
          # Lancement de la compilation principale (Utilisation de tous les c≈ìurs disponibles)
          make -j$(nproc) O=out \
            ARCH=${{ env.ARCH }} \
            CROSS_COMPILE=${{ env.CROSS_COMPILE_PREFIX }}

      - name: üì¶ Archiver les Artefacts Compil√©s
        uses: actions/upload-artifact@v4
        with:
          name: VTR-NetHunter-Kernel-GCC49-${{ github.sha }}
          # Inclut l'image du noyau (Image.gz) et les modules (.ko)
          path: |
            ${{ env.KERNEL_SOURCE_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz
            ${{ env.KERNEL_SOURCE_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz-dtb
            ${{ env.KERNEL_SOURCE_DIR }}/out/drivers/**/*.ko 
          retention-days: 7
          if-no-files-found: "error"
          
      - name: ‚úÖ V√©rification de la sortie
        if: success()
        run: |
          echo "Compilation r√©ussie. Le fichier Image.gz est disponible dans les Artefacts."
          ls -l ${{ env.KERNEL_SOURCE_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz

